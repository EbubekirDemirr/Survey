// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20230929024322_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.DbEntities.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3915),
                            IsDeleted = false,
                            SurveyName = "Hazır Anket",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyChoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ChoiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SurveyQuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyChoices");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ChoiceName = "Patates Kızartması",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3863),
                            IsDeleted = false,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            ChoiceName = "Burger",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3865),
                            IsDeleted = false,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            ChoiceName = "Döner",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3866),
                            IsDeleted = false,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            ChoiceName = "Kuru Fasulye",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3867),
                            IsDeleted = false,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            ChoiceName = "Makarna",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3868),
                            IsDeleted = false,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            ChoiceName = "Pop",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3869),
                            IsDeleted = false,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            ChoiceName = "Rap",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3870),
                            IsDeleted = false,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            ChoiceName = "Rock",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3871),
                            IsDeleted = false,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            ChoiceName = "Türk Halk Müziği",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3872),
                            IsDeleted = false,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            ChoiceName = "Arabesk",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3873),
                            IsDeleted = false,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            ChoiceName = "Uyuyarak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3874),
                            IsDeleted = false,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 12L,
                            ChoiceName = "Bilgisayar başında",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3876),
                            IsDeleted = false,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 13L,
                            ChoiceName = "Yürüyüş yaparak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3877),
                            IsDeleted = false,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 14L,
                            ChoiceName = "Kitap okuyarak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3878),
                            IsDeleted = false,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 15L,
                            ChoiceName = "Arkadaşlarıyla buluşarak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3879),
                            IsDeleted = false,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            ChoiceName = "Kayıp parayı bulmak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3880),
                            IsDeleted = false,
                            SurveyQuestionId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            ChoiceName = "Tuttuğu takımın galibiyeti",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3881),
                            IsDeleted = false,
                            SurveyQuestionId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            ChoiceName = "Süpriz hediye almak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3882),
                            IsDeleted = false,
                            SurveyQuestionId = 4L
                        },
                        new
                        {
                            Id = 19L,
                            ChoiceName = "Alışveriş mağazasındaki indirimler",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3883),
                            IsDeleted = false,
                            SurveyQuestionId = 4L
                        },
                        new
                        {
                            Id = 20L,
                            ChoiceName = "Çekilişle telefon kazanmak",
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3884),
                            IsDeleted = false,
                            SurveyQuestionId = 4L
                        });
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3830),
                            IsDeleted = false,
                            QuestionName = "En sevdiği yemek?",
                            SurveyId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3841),
                            IsDeleted = false,
                            QuestionName = "En sevdiği müzik türü?",
                            SurveyId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3843),
                            IsDeleted = false,
                            QuestionName = "Zamanını nasıl geçirir?",
                            SurveyId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3844),
                            IsDeleted = false,
                            QuestionName = "Onu en çok ne sevindirir?",
                            SurveyId = 1L
                        });
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Users.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9488a0f-07aa-416b-9edf-e9e75126b9f8",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "super_admin@survey.com.tr",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "SUPERADMIN2023",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Users.UserSurveyQuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AnswerUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPollster")
                        .HasColumnType("bit");

                    b.Property<long?>("SurveyChoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyQuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerUserId");

                    b.HasIndex("SurveyChoiceId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("UserSurveyQuestionAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3935),
                            IsDeleted = false,
                            IsPollster = false,
                            SurveyChoiceId = 1L,
                            SurveyId = 1L,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3937),
                            IsDeleted = false,
                            IsPollster = false,
                            SurveyChoiceId = 8L,
                            SurveyId = 1L,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3939),
                            IsDeleted = false,
                            IsPollster = false,
                            SurveyChoiceId = 12L,
                            SurveyId = 1L,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3940),
                            IsDeleted = false,
                            IsPollster = false,
                            SurveyChoiceId = 16L,
                            SurveyId = 1L,
                            SurveyQuestionId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3952),
                            IsDeleted = false,
                            IsPollster = true,
                            SurveyChoiceId = 2L,
                            SurveyId = 1L,
                            SurveyQuestionId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3954),
                            IsDeleted = false,
                            IsPollster = true,
                            SurveyChoiceId = 9L,
                            SurveyId = 1L,
                            SurveyQuestionId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3955),
                            IsDeleted = false,
                            IsPollster = true,
                            SurveyChoiceId = 12L,
                            SurveyId = 1L,
                            SurveyQuestionId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            AnswerUserId = 1L,
                            CreatedDate = new DateTime(2023, 9, 29, 5, 43, 22, 659, DateTimeKind.Local).AddTicks(3957),
                            IsDeleted = false,
                            IsPollster = true,
                            SurveyChoiceId = 16L,
                            SurveyId = 1L,
                            SurveyQuestionId = 4L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Survey", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyChoice", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyChoices")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyQuestion", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Users.UserSurveyQuestionAnswer", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.User", "AnswerUser")
                        .WithMany("UserSurveyQuestionAnswers")
                        .HasForeignKey("AnswerUserId");

                    b.HasOne("Entities.Concrete.DbEntities.SurveyChoice", "SurveyChoice")
                        .WithMany("UserSurveyQuestionAnswers")
                        .HasForeignKey("SurveyChoiceId");

                    b.HasOne("Entities.Concrete.DbEntities.Survey", "Survey")
                        .WithMany("UserSurveyQuestionAnswers")
                        .HasForeignKey("SurveyId");

                    b.HasOne("Entities.Concrete.DbEntities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("UserSurveyQuestionAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerUser");

                    b.Navigation("Survey");

                    b.Navigation("SurveyChoice");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.DbEntities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Entities.Concrete.DbEntities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("UserSurveyQuestionAnswers");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyChoice", b =>
                {
                    b.Navigation("UserSurveyQuestionAnswers");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyChoices");

                    b.Navigation("UserSurveyQuestionAnswers");
                });

            modelBuilder.Entity("Entities.Concrete.DbEntities.Users.User", b =>
                {
                    b.Navigation("Surveys");

                    b.Navigation("UserSurveyQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
